// Generated by gencpp from file dino_service/DinoGeneratorRequest.msg
// DO NOT EDIT!


#ifndef DINO_SERVICE_MESSAGE_DINOGENERATORREQUEST_H
#define DINO_SERVICE_MESSAGE_DINOGENERATORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dino_service
{
template <class ContainerAllocator>
struct DinoGeneratorRequest_
{
  typedef DinoGeneratorRequest_<ContainerAllocator> Type;

  DinoGeneratorRequest_()
    : word()  {
    }
  DinoGeneratorRequest_(const ContainerAllocator& _alloc)
    : word(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _word_type;
  _word_type word;





  typedef boost::shared_ptr< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DinoGeneratorRequest_

typedef ::dino_service::DinoGeneratorRequest_<std::allocator<void> > DinoGeneratorRequest;

typedef boost::shared_ptr< ::dino_service::DinoGeneratorRequest > DinoGeneratorRequestPtr;
typedef boost::shared_ptr< ::dino_service::DinoGeneratorRequest const> DinoGeneratorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dino_service::DinoGeneratorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dino_service::DinoGeneratorRequest_<ContainerAllocator1> & lhs, const ::dino_service::DinoGeneratorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.word == rhs.word;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dino_service::DinoGeneratorRequest_<ContainerAllocator1> & lhs, const ::dino_service::DinoGeneratorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dino_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf5cbdd7f0c6b9eaa898f882ab6eade6";
  }

  static const char* value(const ::dino_service::DinoGeneratorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf5cbdd7f0c6b9eaULL;
  static const uint64_t static_value2 = 0xa898f882ab6eade6ULL;
};

template<class ContainerAllocator>
struct DataType< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dino_service/DinoGeneratorRequest";
  }

  static const char* value(const ::dino_service::DinoGeneratorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string word\n"
;
  }

  static const char* value(const ::dino_service::DinoGeneratorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.word);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DinoGeneratorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dino_service::DinoGeneratorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dino_service::DinoGeneratorRequest_<ContainerAllocator>& v)
  {
    s << indent << "word: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.word);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DINO_SERVICE_MESSAGE_DINOGENERATORREQUEST_H
